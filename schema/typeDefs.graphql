input PriceInput {
    max: Float
    min: Float
}

type ColorType {
    slug: String
    group: String
    color: String
    idx: Int
    images: [String]
    quantity: Int
    price: Float
    available: Boolean
    main_image: String
    model: String
    name: String
    similar: [ProductType]
}

type AttributeProductType {
    attribute_id: String
    product_id: String
    value: String
}

type AddressType {
    street: String
    city: String
    state: String
}

type CategoryType {
    _id: String
    name: String
    description: String
    meta_title: String
    meta_description: String
    parent_id: String
    slug: String
    productFeed(cursor: String, colors: [String], material: String, price: PriceInput): ProductFeed
    products: [ProductType]
    subcategories: [CategoryType]
    parent: CategoryType
}

type OptionType {
    name: String
    description: String
    picture_id: String
}

type ImageType {
    color: String
    image: String 
}

type ProductType {
    _id: String
    name: String
    available: Boolean
    quantity: Int
    availableColors: [ColorType]
    model: String
    main_image: String
    description_short: String
    description: String
    discount: Float
    meta_title: String
    meta_description: String
    slug: String
    price: Float
    createdAt: String
    color: String
    colors: [ColorType]
    variations: [ColorType]
    similar: [ProductType]
    images: [String]
}

type ProductFeed {
    cursor: String
    products: [ProductType]
    hasMore: Boolean
}

type OrderItemType {
    product_id: String
    option: OptionType
    quantity: Int
}

type OrderType {
    order_item: OrderItemType
}

type CartType {
    products: [CartProductType],
    price: Float
    quantity: Int
}

type CartProductType {
    product: ProductType
    quantity: Int
    price: String
}

type UserType {
    id: String
    name: String
    email: String
    password: String
    level: Int
    attribute_ids: [String]
    attributes: [AttributeProductType]
    orders: [OrderType]
    addresses: [AddressType]
}

type ViewerType {
    allCategories: [CategoryType]
}

type Query {
    viewer: ViewerType
    loggedInUser: UserType
    users: [UserType]
    cart: CartType
    allCategories: [CategoryType]
    getCategory(slug: String!, colors: [String], cursor: String, material: String, price: PriceInput): CategoryType
    getProduct(model: String!): ProductType
    getRouteType(slug: String!): String
}

type Mutation {
    addUser(firstname: String!, age: Int!, companyId: String): UserType
    deleteUser(id: String!): UserType
}
